import express from 'express';
import cors from 'cors';
import multer from 'multer';
import { Octokit } from 'octokit';
import dotenv from 'dotenv';
import { Buffer } from 'buffer';

dotenv.config();

const app = express();
const upload = multer();

app.use(cors());
app.use(express.json());

// Validate environment variables
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_OWNER = process.env.GITHUB_OWNER;
const GITHUB_REPO = process.env.GITHUB_REPO;

if (!GITHUB_TOKEN || !GITHUB_OWNER || !GITHUB_REPO) {
  console.error('Missing required environment variables:');
  if (!GITHUB_TOKEN) console.error('- GITHUB_TOKEN');
  if (!GITHUB_OWNER) console.error('- GITHUB_OWNER');
  if (!GITHUB_REPO) console.error('- GITHUB_REPO');
  process.exit(1);
}

const octokit = new Octokit({
  auth: GITHUB_TOKEN
});

// Verify repository access
async function verifyRepoAccess() {
  try {
    await octokit.rest.repos.get({
      owner: GITHUB_OWNER,
      repo: GITHUB_REPO
    });
    console.log('Successfully connected to GitHub repository');
  } catch (error) {
    console.error('Failed to access GitHub repository:', error.message);
    process.exit(1);
  }
}

verifyRepoAccess();

app.post('/upload', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No image file provided' });
    }

    // Create images directory if it doesn't exist
    try {
      await octokit.rest.repos.getContent({
        owner: GITHUB_OWNER,
        repo: GITHUB_REPO,
        path: 'images'
      });
    } catch (error) {
      if (error.status === 404) {
        // Create images directory with a README
        await octokit.rest.repos.createOrUpdateFileContents({
          owner: GITHUB_OWNER,
          repo: GITHUB_REPO,
          path: 'images/README.md',
          message: 'Create images directory',
          content: Buffer.from('# Images Directory\nThis directory contains uploaded images.').toString('base64')
        });
      }
    }

    const path = `images/${Date.now()}-${req.file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_')}`;
    const content = req.file.buffer.toString('base64');

    const response = await octokit.rest.repos.createOrUpdateFileContents({
      owner: GITHUB_OWNER,
      repo: GITHUB_REPO,
      path: path,
      message: `Upload image: ${req.file.originalname}`,
      content: content,
      branch: 'main'
    });

    const imageUrl = `https://raw.githubusercontent.com/${GITHUB_OWNER}/${GITHUB_REPO}/main/${path}`;
    console.log('Successfully uploaded image:', imageUrl);
    res.json({ url: imageUrl });
  } catch (error) {
    console.error('Error uploading to GitHub:', error.message);
    res.status(500).json({ 
      error: 'Failed to upload image to GitHub',
      details: error.message 
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`GitHub Configuration:`);
  console.log(`- Owner: ${GITHUB_OWNER}`);
  console.log(`- Repository: ${GITHUB_REPO}`);
});